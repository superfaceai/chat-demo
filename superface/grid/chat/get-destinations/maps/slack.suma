profile = "chat/get-destinations@1.0"
provider = "slack"

"""
GetDestinations map
"""
map GetDestinations {
    types = call typesToQuery(types = input.types)

    http GET "/conversations.list" {
        request "application/x-www-form-urlencoded" {
            query {
                cursor = input.page
                exclude_archived = true
                limit = input.limit
                types = types
            }

            headers {
                "Authorization" = `Bearer ${parameters.accessToken}`
            }
        }

        response 200 "application/json" {
            return map error if (body.ok === false) {
                title = body.error
            }

            destinations = call MapDestinations(destinations = body.channels)

            return map result if (body.has_more === true) {
                nextPage = body.response_metadata.next_cursor
                destinations = destinations
            }

            return map result {
                destinations = destinations
            }
        }

		response 429 {
			map error {
				title = 'Too Many Requests'
				detail = `Retry after ${headers['Retry-After']} seconds`
			}
		}

        response "application/json" {
            map error {
                title = body.error
            }
        }
    }
}

operation MapDestinations {
    destinations = args.destinations.map(dest => {
        const result = {
            id: dest.id,
            createdAt: dest.created,
        };

        if (dest.name) {
            result.name = dest.name;
        }

        if (dest.topic.value && dest.topic.value !== '') {
            result.description = dest.topic.value;
        }
        
        if (dest.purpose.value && dest.purpose.value !== '') {
            if (result.description !== undefined) {
                result.description += ` - ${dest.purpose.value}`;
            } else {
                result.description = dest.purpose.value;
            }
        }

        if (dest.num_members) {
            result.numOfMembers = dest.num_members;
        }

        return result;
    })

    return destinations
}

operation typesToQuery {
   types = args.types.map(type => {
       if (type === 'private') {
           return 'private_channel';
       } else if (type === 'public') {
           return 'public_channel';
       }
   }).join(',')

   return types;
}