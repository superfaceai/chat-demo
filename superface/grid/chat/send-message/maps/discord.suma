profile = "chat/send-message@1.0"
provider = "discord"

"""
SendMessage map
"""
map SendMessage {
	destination = input.destination

	http POST "/channels/{destination}/messages" {
		request "application/json" {
			headers {
				"Authorization" = `Bot ${parameters.accessToken}`
			}
			body {
				content = input.text
			}
		}

		response 200 "application/json" {
			rateLimit = call MapRateLimitDetails(headers = headers)

			map result {
				messageId = body.id,
				destination = body.channel_id
				rateLimit = rateLimit
			}
		}

		response 400 "application/json" {
			map error {
				title = "Bad Request"
				detail = body
			}
		}

		response 401 "application/json" {
			map error {
				title = "Unauthorized"
				detail = body.message
			}
		}

		response 403 "application/json" {
			map error {
				title = "Forbidden"
				detail = body.message
			}
		}

		response 404 "application/json" {
			map error {
				title = "Not Found"
				detail = body.message
			}
		}

		response 405 "application/json" {
			map error {
				title = "Method not allowed"
				detail = body.message
			}
		}

		response 429 "application/json" {
			rateLimit = call MapRateLimitDetails(headers = headers)
				
			map error {
				title = "Too many requests"
				detail = body.message
				rateLimit = rateLimit
			}
		}

		response 502 "application/json" {
			map error {
				title = "Gateway unavailable"
				detail = body.message
			}
		}
	}
}

operation MapRateLimitDetails {
	headers = args.headers
	totalRequests = parseInt(headers['x-ratelimit-limit'])
	remainingRequests = parseInt(headers['x-ratelimit-remaining'])
	remainingRequestsPercentage = (parseInt(headers['x-ratelimit-remaining']) / parseInt(headers['x-ratelimit-limit'])) * 100
	resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
	resetAfter = parseInt(headers['x-ratelimit-reset-after'])

	return {
		bucket = headers['x-ratelimit-bucket']
		totalRequests = totalRequests
		remainingRequests = remainingRequests
		remainingRequestsPercentage = remainingRequestsPercentage
		resetTimestamp = resetTimestamp
		resetAfter = resetAfter
	}
}