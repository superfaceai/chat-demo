profile = "chat/get-messages@1.0"
provider = "discord"

"""
GetMessages map
"""
map GetMessages {
	destination = input.destination
	afterId = undefined
	beforeId = undefined

	set if(input.afterDate) {
		afterId = call GetSnowflake(date = input.afterDate)
	}

	set if(input.beforeDate) {
		beforeId = call GetSnowflake(date = input.beforeDate)
	}

	http GET "/channels/{destination}/messages" {
		request "application/json" {
			query {
				after = afterId
				before = beforeId
				limit = input.limit
			}

			headers {
				"Authorization" = `Bot ${parameters.accessToken}`
			}
		}

		response 200 "application/json" {
			messages = call MapMessages(messages = body)
			rateLimit = call MapRateLimitDetails(headers = headers)

			map result {
				previousPage = messages[0].id
				nextPage = messages[messages.length - 1].id
				messages = messages
				rateLimit = rateLimit
			}
		}

		response 400 "application/json" {
			map error {
				title = "Bad Request"
				detail = body
			}
		}

		response 401 "application/json" {
			map error {
				title = "Unauthorized"
				detail = body.message
			}
		}

		response 403 "application/json" {
			map error {
				title = "Forbidden"
				detail = body.message
			}
		}

		response 404 "application/json" {
			map error {
				title = "Not Found"
				detail = body.message
			}
		}

		response 405 "application/json" {
			map error {
				title = "Method not allowed"
				detail = body.message
			}
		}

		response 429 "application/json" {
			map error {
				title = "Too many requests"
				detail = body.message
			}
		}

		response 502 "application/json" {
			map error {
				title = "Gateway unavailable"
				detail = body.message
			}
		}
	}
}

"""
Operation MapMessages
Returns array mapping messages in received body
"""
operation MapMessages {
	messages = args.messages.map(message => {
		const result = {
			id: message.id,
			author: {
				id: message.author.id,
				username: message.author.username
			},
			createdAt: Date.parse(message.timestamp),
			text: message.content
		}
		const discordEpoch = 1420070400000;
		const getTimestamp = (snowflake) => {
			return Number(BigInt(snowflake) >> BigInt(22)) + discordEpoch
		} 

		if (message.edited_timestamp) {
			result.updatedAt = Date.parse(message.edited_timestamp)
		}

		if (message.reactions) {
			result.reactions = message.reactions.map(reaction => ({
				emoji: reaction.emoji.name,
				count: reaction.count,
			}))
		}

		if (message.thread) {
			result.hasThread = true
			result.threadId = message.thread.id
		}

		if (message.attachments && message.attachments.length > 0) {
			result.attachments = message.attachments.map(file => ({
				id: file.id,
				createdAt: getTimestamp(file.id),
				fileName: file.filename,
				mediaType: file.content_type,
				url: file.url,
			}))
		}

		return result
	})

	return messages
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
	headers = args.headers
	totalRequests = parseInt(headers['x-ratelimit-limit'])
	remainingRequests = parseInt(headers['x-ratelimit-remaining'])
	remainingRequestsPercentage = (parseInt(headers['x-ratelimit-remaining']) / parseInt(headers['x-ratelimit-limit'])) * 100
	resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
	resetAfter = parseInt(headers['x-ratelimit-reset-after'])

	return {
		bucket = headers['x-ratelimit-bucket']
		totalRequests = totalRequests
		remainingRequests = remainingRequests
		remainingRequestsPercentage = remainingRequestsPercentage
		resetTimestamp = resetTimestamp
		resetAfter = resetAfter
	}
}

"""
Operation GetSnowflake

Returns discord snowflake id based on input
More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
"""
operation GetSnowflake {
	discordEpoch = 1420070400000

	date = args.date
	processedDate = date - discordEpoch

	// if date is not a string, it should not have property `length`
	return if (date.length === undefined) (BigInt(processedDate) << BigInt(22)).toString()

	// if date is not a number, we expect snowflake id
	return if (date.length !== undefined) date
}

"""
OperationGet Timestamp

Returns UNIX timestamp from specified discord snowflake id
More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
"""
operation GetTimestamp {
	discordEpoch = 1420070400000

	snowflake = args.id

	processedSnowflake = Number(BigInt(snowflake) >> BigInt(22))

	return processedSnowflake + discordEpoch
}
