profile = "chat/get-messages@1.0"
provider = "slack"

"""
GetMessages map
"""
map GetMessages {
	http GET "/conversations.history" {
		request "application/x-www-form-urlencoded" {
			query {
				channel = input.destination
				oldest = input.afterDate
				cursor = input.page
				limit = input.limit || 100
			}

			headers {
				"Authorization" = `Bearer ${parameters.accessToken}`
			}
		}

		response 200 "application/json" {
			// See https://api.slack.com/methods/conversations.history#errors for more information about errors
			return map error if (body.ok === false) {
				title = body.error
			}

			messages = call MapMessages(messages = body.messages)

			return map result if (body.has_more) {
				nextPage = body.response_metadata.next_cursor
				messages = messages
			}

			return map result if (!body.has_more) {
				messages = messages
			}
		}

		response 429 {
			map error {
				title = 'Too Many Requests'
				detail = `Retry after ${headers['Retry-After']} seconds`
			}
		}

		response "application/json" {
			map error if (body.ok === false) {
				title = body.error
			}
		}
	}
}

operation MapMessages {
	messages = args.messages.filter(message => message.type === 'message')
					
	set if (messages.length > 0) {
		messages = messages.map((message) => {
			const result = {
				id: message.ts,
				text: message.text,
				createdAt: parseFloat(message.ts),
			}
			
			if (message.user || message.bot_id) {
				result.author = {
					id: message.user || message.bot_id,
					username: message.username
				};
			}

			if (message.thread_ts) {
				result.hasThread = true
				result.threadId = message.thread_ts;
			}

			if (message.edited) {
				result.updatedAt = parseFloat(message.edited.ts);
			}

			if (message.reactions) {
				result.reactions = message.reactions.map(reaction => ({
					emoji: reaction.name,
					count: reaction.count,
					users: reaction.users
				}));
			}

			if (message.files && message.files.length > 0) {
				result.attachments = message.files.map(file => ({
					id: file.id,
					createdAt: file.created,
					fileName: file.name,
					mediaType: file.mimetype,
					url: file.permalink_public,
					preview: file.preview,
				}))
			}

			return result
		});
	}

	return messages
}
